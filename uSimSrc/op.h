/* uSim op.h * Copyright (C) 2000, Tsurishaddai Williamson, tsuri@earthlink.net *  * This program is free software; you can redistribute it and/or * modify it under the terms of the GNU General Public License * as published by the Free Software Foundation; either version 2 * of the License, or (at your option) any later version. *  * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. *  * You should have received a copy of the GNU General Public License * along with this program; if not, write to the Free Software * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA. *//**********************************************************************/OPERATION(0x00, 00, D, "NOP", "NOP", NOP, NOP)OPERATION(0x01, 01NNNN, F, "LXI B,%2", "LD BC,%2", LD_BC_NNNN, LD_BC_NNNN)OPERATION(0x02, 02, A, "STAX B", "LD (BC),A", LD_iBC_A, LD_iBC_A)OPERATION(0x03, 03, A, "INX B", "INC BC", INC_BC, INC_BC)OPERATION(0x04, 04, A, "INR B", "INC B", INC_B, INC_B)OPERATION(0x05, 05, A, "DCR B", "DEC B", DEC_B, DEC_B)OPERATION(0x06, 06NN, A, "MVI B,%1", "LD B,%1", LD_B_NN, LD_B_NN)OPERATION(0x07, 07, A, "RLC", "RLCA", RLCA, RLCA)OPERATION(0x08, 08, A, "", "EX AF,AF", UOP1, EX_AF_AF)OPERATION(0x09, 09, A, "DAD B", "ADD HL,BC", ADD_HL_BC, ADD_HL_BC)OPERATION(0x0A, 0A, A, "LDAX B", "LD A,(BC)", LD_A_iBC, LD_A_iBC)OPERATION(0x0B, 0B, A, "DCX B", "DEC BC", DEC_BC, DEC_BC)OPERATION(0x0C, 0C, A, "INR C", "INC C", INC_C, INC_C)OPERATION(0x0D, 0D, A, "DCR C", "DEC C", DEC_C, DEC_C)OPERATION(0x0E, 0ENN, A, "MVI C,%1", "LD C,%1", LD_C_NN, LD_C_NN)OPERATION(0x0F, 0F, A, "RRC", "RRC A", RRCA, RRCA)OPERATION(0x10, 10NN, C, "", "DJNZ %3", UOP1, DJNZ_NN)OPERATION(0x11, 11NNNN, F, "LXI D,%2", "LD DE,%2", LD_DE_NNNN, LD_DE_NNNN)OPERATION(0x12, 12, A, "STAX D", "LD (DE),A", LD_iDE_A, LD_iDE_A)OPERATION(0x13, 13, A, "INX D", "INC DE", INC_DE, INC_DE)OPERATION(0x14, 14, A, "INR D", "INC D", INC_D, INC_D)OPERATION(0x15, 15, A, "DCR D", "DEC D", DEC_D, DEC_D)OPERATION(0x16, 16NN, A, "MVI D,%1", "LD D,%1", LD_D_NN, LD_D_NN)OPERATION(0x17, 17, A, "RAL", "RLA", RLA, RLA)OPERATION(0x18, 18NN, B, "", "JR %3", UOP1, JR_NN)OPERATION(0x19, 19, A, "DAD D", "ADD HL,DE", ADD_HL_DE, ADD_HL_DE)OPERATION(0x1A, 1A, A, "LDAX D", "LD A,(DE)", LD_A_iDE, LD_A_iDE)OPERATION(0x1B, 1B, A, "DCX D", "DEC DE", DEC_DE, DEC_DE)OPERATION(0x1C, 1C, A, "INR E", "INC E", INC_E, INC_E)OPERATION(0x1D, 1D, A, "DCR E", "DEC E", DEC_E, DEC_E)OPERATION(0x1E, 1ENN, A, "MVI E,%1", "LD E,%1", LD_E_NN, LD_E_NN)OPERATION(0x1F, 1F, A, "RAR", "RRA", RRA, RRA)OPERATION(0x20, 20NN, C, "", "JR NZ,%3", UOP1, JR_NZ_NN)OPERATION(0x21, 21NNNN, F, "LXI H,%2", "LD HL,%2", LD_HL_NNNN, LD_HL_NNNN)OPERATION(0x22, 22NNNN, F, "SHLD %2", "LD (%2),HL", LD_iNNNN_HL, LD_iNNNN_HL)OPERATION(0x23, 23, A, "INX H", "INC HL", INC_HL, INC_HL)OPERATION(0x24, 24, A, "INR H", "INC H", INC_H, INC_H)OPERATION(0x25, 25, A, "DCR H", "DEC H", DEC_H, DEC_H)OPERATION(0x26, 26NN, A, "MVI H,%1", "LD H,%1", LD_H_NN, LD_H_NN)OPERATION(0x27, 27, A, "DAA", "DAA", DAA, DAA)OPERATION(0x28, 28NN, C, "", "JR Z,%3", UOP1, JR_Z_NN)OPERATION(0x29, 29, A, "DAD H", "ADD HL,HL", ADD_HL_HL, ADD_HL_HL)OPERATION(0x2A, 2ANNNN, F, "LHLD %2", "LD HL,(%2)", LD_HL_iNNNN, LD_HL_iNNNN)OPERATION(0x2B, 2B, A, "DCX H", "DEC HL", DEC_HL, DEC_HL)OPERATION(0x2C, 2C, A, "INR L", "INC L", INC_L, INC_L)OPERATION(0x2D, 2D, A, "DCR L", "DEC L", DEC_L, DEC_L)OPERATION(0x2E, 2ENN, A, "MVI L,%1", "LD L,%1", LD_L_NN, LD_L_NN)OPERATION(0x2F, 2F, A, "CMA", "CPL", CPL, CPL)OPERATION(0x30, 30NN, C, "", "JR NC,%3", UOP1, JR_NC_NN)OPERATION(0x31, 31NNNN, F, "LXI SP,%2", "LD SP,%2", LD_SP_NNNN, LD_SP_NNNN)OPERATION(0x32, 32NNNN, F, "STA %2", "LD (%2),A", LD_iNNNN_A, LD_iNNNN_A)OPERATION(0x33, 33, A, "INX SP", "INC SP", INC_SP, INC_SP)OPERATION(0x34, 34, A, "INR M", "INC (HL)", INC_iHL, INC_iHL)OPERATION(0x35, 35, A, "DCR M", "DEC (HL)", DEC_iHL, DEC_iHL)OPERATION(0x36, 36NN, A, "MVI M,%1", "LD (HL),%1", LD_iHL_NN, LD_iHL_NN)OPERATION(0x37, 37, A, "STC", "SCF", SCF, SCF)OPERATION(0x38, 38NN, C, "", "JR C,%3", UOP1, JR_C_NN)OPERATION(0x39, 39, A, "DAD SP", "ADD HL,SP", ADD_HL_SP, ADD_HL_SP)OPERATION(0x3A, 3ANNNN, F, "LDA %2", "LD A,(%2)", LD_A_iNNNN, LD_A_iNNNN)OPERATION(0x3B, 3B, A, "DCX SP", "DEC SP", DEC_SP, DEC_SP)OPERATION(0x3C, 3C, A, "INR A", "INC A", INC_A, INC_A)OPERATION(0x3D, 3D, A, "DCR A", "DEC A", DEC_A, DEC_A)OPERATION(0x3E, 3ENN, A, "MVI A,%1", "LD A,%1", LD_A_NN, LD_A_NN)OPERATION(0x3F, 3F, A, "CMC", "CCF", CCF, CCF)OPERATION(0x40, 40, A, "MOV B,B", "LD B,B", LD_B_B, LD_B_B)OPERATION(0x41, 41, A, "MOV B,C", "LD B,C", LD_B_C, LD_B_C)OPERATION(0x42, 42, A, "MOV B,D", "LD B,D", LD_B_D, LD_B_D)OPERATION(0x43, 43, A, "MOV B,E", "LD B,E", LD_B_E, LD_B_E)OPERATION(0x44, 44, A, "MOV B,H", "LD B,H", LD_B_H, LD_B_H)OPERATION(0x45, 45, A, "MOV B,L", "LD B,L", LD_B_L, LD_B_L)OPERATION(0x46, 46, A, "MOV B,M", "LD B,(HL)", LD_B_iHL, LD_B_iHL)OPERATION(0x47, 47, A, "MOV B,A", "LD B,A", LD_B_A, LD_B_A)OPERATION(0x48, 48, A, "MOV C,B", "LD C,B", LD_C_B, LD_C_B)OPERATION(0x49, 49, A, "MOV C,C", "LD C,C", LD_C_C, LD_C_C)OPERATION(0x4A, 4A, A, "MOV C,D", "LD C,D", LD_C_D, LD_C_D)OPERATION(0x4B, 4B, A, "MOV C,E", "LD C,E", LD_C_E, LD_C_E)OPERATION(0x4C, 4C, A, "MOV C,H", "LD C,H", LD_C_H, LD_C_H)OPERATION(0x4D, 4D, A, "MOV C,L", "LD C,L", LD_C_L, LD_C_L)OPERATION(0x4E, 4E, A, "MOV C,M", "LD C,(HL)", LD_C_iHL, LD_C_iHL)OPERATION(0x4F, 4F, A, "MOV C,A", "LD C,A", LD_C_A, LD_C_A)OPERATION(0x50, 50, A, "MOV D,B", "LD D,B", LD_D_B, LD_D_B)OPERATION(0x51, 51, A, "MOV D,C", "LD D,C", LD_D_C, LD_D_C)OPERATION(0x52, 52, A, "MOV D,D", "LD D,D", LD_D_D, LD_D_D)OPERATION(0x53, 53, A, "MOV D,E", "LD D,E", LD_D_E, LD_D_E)OPERATION(0x54, 54, A, "MOV D,H", "LD D,H", LD_D_H, LD_D_H)OPERATION(0x55, 55, A, "MOV D,L", "LD D,L", LD_D_L, LD_D_L)OPERATION(0x56, 56, A, "MOV D,M", "LD D,(HL)", LD_D_iHL, LD_D_iHL)OPERATION(0x57, 57, A, "MOV D,A", "LD D,A", LD_D_A, LD_D_A)OPERATION(0x58, 58, A, "MOV E,B", "LD E,B", LD_E_B, LD_E_B)OPERATION(0x59, 59, A, "MOV E,C", "LD E,C", LD_E_C, LD_E_C)OPERATION(0x5A, 5A, A, "MOV E,D", "LD E,D", LD_E_D, LD_E_D)OPERATION(0x5B, 5B, A, "MOV E,E", "LD E,E", LD_E_E, LD_E_E)OPERATION(0x5C, 5C, A, "MOV E,H", "LD E,H", LD_E_H, LD_E_H)OPERATION(0x5D, 5D, A, "MOV E,L", "LD E,L", LD_E_L, LD_E_L)OPERATION(0x5E, 5E, A, "MOV E,M", "LD E,(HL)", LD_E_iHL, LD_E_iHL)OPERATION(0x5F, 5F, A, "MOV E,A", "LD E,A", LD_E_A, LD_E_A)OPERATION(0x60, 60, A, "MOV H,B", "LD H,B", LD_H_B, LD_H_B)OPERATION(0x61, 61, A, "MOV H,C", "LD H,C", LD_H_C, LD_H_C)OPERATION(0x62, 62, A, "MOV H,D", "LD H,D", LD_H_D, LD_H_D)OPERATION(0x63, 63, A, "MOV H,E", "LD H,E", LD_H_E, LD_H_E)OPERATION(0x64, 64, A, "MOV H,H", "LD H,H", LD_H_H, LD_H_H)OPERATION(0x65, 65, A, "MOV H,L", "LD H,L", LD_H_L, LD_H_L)OPERATION(0x66, 66, A, "MOV H,M", "LD H,(HL)", LD_H_iHL, LD_H_iHL)OPERATION(0x67, 67, A, "MOV H,A", "LD H,A", LD_H_A, LD_H_A)OPERATION(0x68, 68, A, "MOV L,B", "LD L,B", LD_L_B, LD_L_B)OPERATION(0x69, 69, A, "MOV L,C", "LD L,C", LD_L_C, LD_L_C)OPERATION(0x6A, 6A, A, "MOV L,D", "LD L,D", LD_L_D, LD_L_D)OPERATION(0x6B, 6B, A, "MOV L,E", "LD L,E", LD_L_E, LD_L_E)OPERATION(0x6C, 6C, A, "MOV L,H", "LD L,H", LD_L_H, LD_L_H)OPERATION(0x6D, 6D, A, "MOV L,L", "LD L,L", LD_L_L, LD_L_L)OPERATION(0x6E, 6E, A, "MOV L,M", "LD L,(HL)", LD_L_iHL, LD_L_iHL)OPERATION(0x6F, 6F, A, "MOV L,A", "LD L,A", LD_L_A, LD_L_A)OPERATION(0x70, 70, A, "MOV M,B", "LD (HL),B", LD_iHL_B, LD_iHL_B)OPERATION(0x71, 71, A, "MOV M,C", "LD (HL),C", LD_iHL_C, LD_iHL_C)OPERATION(0x72, 72, A, "MOV M,D", "LD (HL),D", LD_iHL_D, LD_iHL_D)OPERATION(0x73, 73, A, "MOV M,E", "LD (HL),E", LD_iHL_E, LD_iHL_E)OPERATION(0x74, 74, A, "MOV M,H", "LD (HL),H", LD_iHL_H, LD_iHL_H)OPERATION(0x75, 75, A, "MOV M,L", "LD (HL),L", LD_iHL_L, LD_iHL_L)OPERATION(0x76, 76, D, "HLT", "HALT", HALT, HALT)OPERATION(0x77, 77, A, "MOV M,A", "LD (HL),A", LD_iHL_A, LD_iHL_A)OPERATION(0x78, 78, A, "MOV A,B", "LD A,B", LD_A_B, LD_A_B)OPERATION(0x79, 79, A, "MOV A,C", "LD A,C", LD_A_C, LD_A_C)OPERATION(0x7A, 7A, A, "MOV A,D", "LD A,D", LD_A_D, LD_A_D)OPERATION(0x7B, 7B, A, "MOV A,E", "LD A,E", LD_A_E, LD_A_E)OPERATION(0x7C, 7C, A, "MOV A,H", "LD A,H", LD_A_H, LD_A_H)OPERATION(0x7D, 7D, A, "MOV A,L", "LD A,L", LD_A_L, LD_A_L)OPERATION(0x7E, 7E, A, "MOV A,M", "LD A,(HL)", LD_A_iHL, LD_A_iHL)OPERATION(0x7F, 7F, A, "MOV A,A", "LD A,A", LD_A_A, LD_A_A)OPERATION(0x80, 80, A, "ADD B", "ADD A,B", ADD_B, ADD_B)OPERATION(0x81, 81, A, "ADD C", "ADD A,C", ADD_C, ADD_C)OPERATION(0x82, 82, A, "ADD D", "ADD A,D", ADD_D, ADD_D)OPERATION(0x83, 83, A, "ADD E", "ADD A,E", ADD_E, ADD_E)OPERATION(0x84, 84, A, "ADD H", "ADD A,H", ADD_H, ADD_H)OPERATION(0x85, 85, A, "ADD L", "ADD A,L", ADD_L, ADD_L)OPERATION(0x86, 86, A, "ADD M", "ADD A,(HL)", ADD_iHL, ADD_iHL)OPERATION(0x87, 87, A, "ADD A", "ADD A,A", ADD_A, ADD_A)OPERATION(0x88, 88, A, "ADC B", "ADC A,B", ADC_B, ADC_B)OPERATION(0x89, 89, A, "ADC C", "ADC A,C", ADC_C, ADC_C)OPERATION(0x8A, 8A, A, "ADC D", "ADC A,D", ADC_D, ADC_D)OPERATION(0x8B, 8B, A, "ADC E", "ADC A,E", ADC_E, ADC_E)OPERATION(0x8C, 8C, A, "ADC H", "ADC A,H", ADC_H, ADC_H)OPERATION(0x8D, 8D, A, "ADC L", "ADC A,L", ADC_L, ADC_L)OPERATION(0x8E, 8E, A, "ADC M", "ADC A,(HL)", ADC_iHL, ADC_iHL)OPERATION(0x8F, 8F, A, "ADC A", "ADC A,A", ADC_A, ADC_A)OPERATION(0x90, 90, A, "SUB B", "SUB A,B", SUB_B, SUB_B)OPERATION(0x91, 91, A, "SUB C", "SUB A,C", SUB_C, SUB_C)OPERATION(0x92, 92, A, "SUB D", "SUB A,D", SUB_D, SUB_D)OPERATION(0x93, 93, A, "SUB E", "SUB A,E", SUB_E, SUB_E)OPERATION(0x94, 94, A, "SUB H", "SUB A,H", SUB_H, SUB_H)OPERATION(0x95, 95, A, "SUB L", "SUB A,L", SUB_L, SUB_L)OPERATION(0x96, 96, A, "SUB M", "SUB A,(HL)", SUB_iHL, SUB_iHL)OPERATION(0x97, 97, A, "SUB A", "SUB A,A", SUB_A, SUB_A)OPERATION(0x98, 98, A, "SBB B", "SBC A,B", SBC_B, SBC_B)OPERATION(0x99, 99, A, "SBB C", "SBC A,C", SBC_C, SBC_C)OPERATION(0x9A, 9A, A, "SBB D", "SBC A,D", SBC_D, SBC_D)OPERATION(0x9B, 9B, A, "SBB E", "SBC A,E", SBC_E, SBC_E)OPERATION(0x9C, 9C, A, "SBB H", "SBC A,H", SBC_H, SBC_H)OPERATION(0x9D, 9D, A, "SBB L", "SBC A,L", SBC_L, SBC_L)OPERATION(0x9E, 9E, A, "SBB M", "SBC A,(HL)", SBC_iHL, SBC_iHL)OPERATION(0x9F, 9F, A, "SBB A", "SBC A,A", SBC_A, SBC_A)OPERATION(0xA0, A0, A, "ANA B", "AND B", AND_B, AND_B)OPERATION(0xA1, A1, A, "ANA C", "AND C", AND_C, AND_C)OPERATION(0xA2, A2, A, "ANA D", "AND D", AND_D, AND_D)OPERATION(0xA3, A3, A, "ANA E", "AND E", AND_E, AND_E)OPERATION(0xA4, A4, A, "ANA H", "AND H", AND_H, AND_H)OPERATION(0xA5, A5, A, "ANA L", "AND L", AND_L, AND_L)OPERATION(0xA6, A6, A, "ANA M", "AND (HL)", AND_iHL, AND_iHL)OPERATION(0xA7, A7, A, "ANA A", "AND A", AND_A, AND_A)OPERATION(0xA8, A8, A, "XRA B", "XOR B", XOR_B, XOR_B)OPERATION(0xA9, A9, A, "XRA C", "XOR C", XOR_C, XOR_C)OPERATION(0xAA, AA, A, "XRA D", "XOR D", XOR_D, XOR_D)OPERATION(0xAB, AB, A, "XRA E", "XOR E", XOR_E, XOR_E)OPERATION(0xAC, AC, A, "XRA H", "XOR H", XOR_H, XOR_H)OPERATION(0xAD, AD, A, "XRA L", "XOR L", XOR_L, XOR_L)OPERATION(0xAE, AE, A, "XRA M", "XOR (HL)", XOR_iHL, XOR_iHL)OPERATION(0xAF, AF, A, "XRA A", "XOR A", XOR_A, XOR_A)OPERATION(0xB0, B0, A, "ORA B", "OR B", OR_B, OR_B)OPERATION(0xB1, B1, A, "ORA C", "OR C", OR_C, OR_C)OPERATION(0xB2, B2, A, "ORA D", "OR D", OR_D, OR_D)OPERATION(0xB3, B3, A, "ORA E", "OR E", OR_E, OR_E)OPERATION(0xB4, B4, A, "ORA H", "OR H", OR_H, OR_H)OPERATION(0xB5, B5, A, "ORA L", "OR L", OR_L, OR_L)OPERATION(0xB6, B6, A, "ORA M", "OR (HL)", OR_iHL, OR_iHL)OPERATION(0xB7, B7, A, "ORA A", "OR A", OR_A, OR_A)OPERATION(0xB8, B8, A, "CMP B", "CP B", CP_B, CP_B)OPERATION(0xB9, B9, A, "CMP C", "CP C", CP_C, CP_C)OPERATION(0xBA, BA, A, "CMP D", "CP D", CP_D, CP_D)OPERATION(0xBB, BB, A, "CMP E", "CP E", CP_E, CP_E)OPERATION(0xBC, BC, A, "CMP H", "CP H", CP_H, CP_H)OPERATION(0xBD, BD, A, "CMP L", "CP L", CP_L, CP_L)OPERATION(0xBE, BE, A, "CMP M", "CP (HL)", CP_iHL, CP_iHL)OPERATION(0xBF, BF, A, "CMP A", "CP A", CP_A, CP_A)OPERATION(0xC0, C0, E, "RNZ", "RET NZ", RET_NZ, RET_NZ)OPERATION(0xC1, C1, A, "POP B", "POP BC", POP_BC, POP_BC)OPERATION(0xC2, C2NNNN, C, "JNZ %2", "JP NZ,%2", JP_NZ_NNNN, JP_NZ_NNNN)OPERATION(0xC3, C3NNNN, B, "JMP %2", "JP %2", JP_NNNN, JP_NNNN)OPERATION(0xC4, C4NNNN, C, "CNZ %2", "CALL NZ,%2", CALL_NZ_NNNN, CALL_NZ_NNNN)OPERATION(0xC5, C5, A, "PUSH B", "PUSH BC", PUSH_BC, PUSH_BC)OPERATION(0xC6, C6NN, A, "ADI %1", "ADD A,%1", ADD_NN, ADD_NN)OPERATION(0xC7, C7, G, "RST 0", "RST 00H", RST_00, RST_00)OPERATION(0xC8, C8, E, "RZ", "RET Z", RET_Z, RET_Z)OPERATION(0xC9, C9, D, "RET", "RET", RET, RET)OPERATION(0xCA, CANNNN, C, "JZ %2", "JP Z,%2", JP_Z_NNNN, JP_Z_NNNN)OPERATION(0xCB, CB, A, "", "", UOP1, CB_OP)OPERATION(0xCC, CCNNNN, C, "CZ %2", "CALL Z,%2", CALL_Z_NNNN, CALL_Z_NNNN)OPERATION(0xCD, CDNNNN, C, "CALL %2", "CALL %2", CALL_NNNN, CALL_NNNN)OPERATION(0xCE, CENN, A, "ACI %1", "ADC A,%1", ADC_NN, ADC_NN)OPERATION(0xCF, CF, H, "RST 1", "RST 08H", RST_08, RST_08)OPERATION(0xD0, D0, E, "RNC", "RET NC", RET_NC, RET_NC)OPERATION(0xD1, D1, A, "POP D", "POP DE", POP_DE, POP_DE)OPERATION(0xD2, D2NNNN, C, "JNC %2", "JP NC,%2", JP_NC_NNNN, JP_NC_NNNN)OPERATION(0xD3, D3NN, A, "OUT %1", "OUT (%1),A", OUT_iNN_A, OUT_iNN_A)OPERATION(0xD4, D4NNNN, C, "CNC %2", "CALL NC,%2", CALL_NC_NNNN, CALL_NC_NNNN)OPERATION(0xD5, D5, A, "PUSH D", "PUSH DE", PUSH_DE, PUSH_DE)OPERATION(0xD6, D6NN, A, "SUI %1", "SUB A,%1", SUB_NN, SUB_NN)OPERATION(0xD7, D7, I, "RST 2", "RST 10H", RST_10, RST_10)OPERATION(0xD8, D8, E, "RC", "RET C", RET_C, RET_C)OPERATION(0xD9, D9, A, "", "EXX", UOP1, EXX)OPERATION(0xDA, DANNNN, C, "JC %2", "JP C,%2", JP_C_NNNN, JP_C_NNNN)OPERATION(0xDB, DB, A, "IN %1", "IN A,(%1)", IN_A_iNN, IN_A_iNN)OPERATION(0xDC, DCNNNN, C, "CC %2", "CALL C,%2", CALL_C_NNNN, CALL_C_NNNN)OPERATION(0xDD, DD, A, "", "", UOP1, DD_OP)OPERATION(0xDE, DENN, A, "SBI %1", "SBC A,%1", SBC_NN, SBC_NN)OPERATION(0xDF, DF, J, "RST 3", "RST 18H", RST_18, RST_18)OPERATION(0xE0, E0, E, "RPO", "RET PO", RET_PO, RET_PO)OPERATION(0xE1, E1, A, "POP H", "POP HL", POP_HL, POP_HL)OPERATION(0xE2, E2NNNN, C, "JPO %2", "JP PO,%2", JP_PO_NNNN, JP_PO_NNNN)OPERATION(0xE3, E3, A, "XTHL", "EX (SP),HL", EX_iSP_HL, EX_iSP_HL)OPERATION(0xE4, E4NNNN, C, "CPO %2", "CALL PO,%2", CALL_PO_NNNN, CALL_PO_NNNN)OPERATION(0xE5, E5, A, "PUSH H", "PUSH HL", PUSH_HL, PUSH_HL)OPERATION(0xE6, E6NN, A, "ANI %1", "AND %1", AND_NN, AND_NN)OPERATION(0xE7, E7, K, "RST 4", "RST 20H", RST_20, RST_20)OPERATION(0xE8, E8, E, "RPE", "RET PE", RET_PE, RET_PE)OPERATION(0xE9, E9, B, "PCHL", "JP (HL)", JP_iHL, JP_iHL)OPERATION(0xEA, EANNNN, C, "JPE %2", "JP PE,%2", JP_PE_NNNN, JP_PE_NNNN)OPERATION(0xEB, EB, A, "XCHG", "EX DE,HL", EX_DE_HL, EX_DE_HL)OPERATION(0xEC, ECNNNN, C, "CPE %2", "CALL PE,%2", CALL_PE_NNNN, CALL_PE_NNNN)OPERATION(0xED, ED, A, "", "", UOP1, ED_OP)OPERATION(0xEE, EENN, A, "XRI %1", "XOR %1", XOR_NN, XOR_NN)OPERATION(0xEF, EF, L, "RST 5", "RST 28H", RST_28, RST_28)OPERATION(0xF0, F0, E, "RP", "RET P", RET_P, RET_P)OPERATION(0xF1, F1, A, "POP PSW", "POP AF", POP_AF, POP_AF)OPERATION(0xF2, F2NNNN, C, "JP %2", "JP P,%2", JP_P_NNNN, JP_P_NNNN)OPERATION(0xF3, F3, A, "DI", "DI", DI, DI)OPERATION(0xF4, F4NNNN, C, "CP %2", "CALL P,%2", CALL_P_NNNN, CALL_P_NNNN)OPERATION(0xF5, F5, A, "PUSH PSW", "PUSH AF", PUSH_AF, PUSH_AF)OPERATION(0xF6, F6NN, A, "ORI %1", "OR %1", OR_NN, OR_NN)OPERATION(0xF7, F7, M, "RST 6", "RST 30H", RST_30, RST_30)OPERATION(0xF8, F8, E, "RM", "RET M", RET_M, RET_M)OPERATION(0xF9, F9, A, "SPHL", "LD SP,HL", LD_SP_HL, LD_SP_HL)OPERATION(0xFA, FANNNN, C, "JM %2", "JP M,%2", JP_M_NNNN, JP_M_NNNN)OPERATION(0xFB, FB, A, "EI", "EI", EI, EI)OPERATION(0xFC, FCNNNN, C, "CM %2", "CALL M,%2", CALL_M_NNNN, CALL_M_NNNN)OPERATION(0xFD, FD, A, "", "", UOP1, FD_OP)OPERATION(0xFE, FENN, A, "CPI %1", "CP %1", CP_NN, CP_NN)OPERATION(0xFF, FF, N, "RST 7", "RST 38H", RST_38, RST_38)